#summary Short introduction to SPTF

== Background ==

== Install *SPTF* ==

Simple open the compressed archive:

{{{
# tar -jxvf stpf-<version>.tag.bz2
}}}

== *SPTF* environment and dependencies ==

=== Environment ===
*SPTF* should supply certain directory structure.

{{{
# tree -d -L 1 sptf/
sptf/
|--bin
|--config
|--lib
|--scenarios
`--tests

}}}

... where:

||`bin/`||-|| the "binary" test cases.||  
||`config/`||-||directory for all configuration files used by the tests.||
||`lib/`||-||the testing code (currently only Perl supported).||
||`scenarios/`||-||scenarios metadata.||
||`tests/`||-||test cases metdata.||

*SPTF* package includes some test cases and scenarios code and metadata. These are the *SPTF* unit tests. 
----

NOTE: *SPTF* unit tests are written in *SPTF*. They may be used as an example. 

----

Clearly the test code and the test configuration should be separated.
*SPTF* let you do that by passing parameters to your testing method
from within the metadata.

=== Dependencies ===

*SPTF* was proved to work correctly under:

_OS_

  * Gentoo 
  * RHE 4
  * Centos 4.4
  * WinXP (although with some error - look at Issues)


_Perl versions_

  * 5.8.5
  * 5.8.7
  * 5.8.8

_Perl modules required_

  * Test::Builder
  * Text::ASCIITable
  * Time::Elapse

(Other modules used by *SPTF* suppose to be the core modules)
  
== SPTF Flow ==

[http://www.fileden.com/files/2008/8/31/2074614/sptf-flow.jpg]

== Create Test Case in Perl ==

== Create Test Case in other language ==

== Create Test Case metadata ==

== What is Test Scenario ? ==

== Create Test Scenario metadata ==

== Start to use it ==

Now we can watch the summary of each test case within the newly created
scenario, you may say to verify it:

{{{
# ./sptf --show-tc-summary --scenario-id 1
}}}

If you already forgot what this scenario is about:

{{{
# ./sptf --show-description --scenario-id 1
}}} 

To execute the test scenario we've just create:

{{{
# ./sptf --run --scenario-id 1
}}}

== Why TAP ? ==

Because it's a ...

== The other mode SPTF can work in ==

As we already know, testing facilities in SPTF are very basic. SPTF will execute the test method and simple check (using [http://cpan.uwinnipeg.ca/htdocs/Test-Simple/Test/More.html Test::More] *ok* function) its result, if it was true or false. In some cases, it may not be sufficient. Perl has very rich testing framework, why not to use it in our tests ? 

This is why SPTF offer a different mode of work, Test Builder mode. In our code we can use [http://cpan.uwinnipeg.ca/htdocs/Test-Simple/Test/Builder.html Test::Builder] class to create TAP complient testing methods. Now through the configuration file option _testbuilder_ or using _--test-builder_ flag in CLI, we can ask SPTF simple to run this method without using SPTF internal testing mechanizm (verifying the result with the *ok* function). In Test Builder mode our tests will be much more flexible, exact and verbose if we need it. 

IMHO, Test Builder mode is preferable over the simple mode. 

*NOTE: You can create and maintain test cases in both modes, but single test scanario may includes only test cases of one kind. It has to be either simple mode or Test Builder mode!*

== Create Test Case in Perl in Test Builder mode ==

*NOTE: In Test Builder mode, SPTF will pass to your function a string as a very first parameter! This string is a combination of test case ID and its summary. It will let you to use it later in your methods code as test case description or as any kind of diagnostic information. Keep it in mind because ingoring this ugly hack may breake your test!*

{{{
# ./sptf --run --scenario-id 1 --test-builder 
}}}